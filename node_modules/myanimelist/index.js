var http = require('http');
var parseString = require('xml2js').parseString;
var compile = require('string-template/compile');
var request = require('request');
var htmlparser = require("htmlparser");

/**
 * Gets substring between to other strings
 * @param totrim String to trim
 * @param string1 String before start of substring
 * @param string2 String after end of substring
 * @callback Function to return substring
 */
function Trim(totrim ,string1, string2, callback) {
	var myarray = [];
	var split1 = totrim.split(string1);

	for(var i = 1; i < split1.length; i++){
		myarray.push(split1[i].split(string2)[0]);
	}
	callback(myarray);
}

/**
 * Converts xml code to json
 * @param toScrape String to be converted to json
 * @param ScrapeValues Array of xml values to search for
 * @callback Function to return json data
 */
function Scrape(toScrape, ScrapeValues, callback) {
    var reJson = {};
    
    for(var i = 0; i < ScrapeValues.length; i++) {
        Trim(toScrape, "<" + ScrapeValues[i] + ">", "</" + ScrapeValues[i] + ">", function(result) {
        reJson[ScrapeValues[i]] = result[0];
        });
    }

    callback(reJson);
}

/**
 * Searches myanimelist for anime
 * @param anime Name of the anime to search for
 * @param username Username of the user searching
 * @param password Password fo the user searching
 * @param callback Function to return the results of the search in JSON
 */
module.exports.AnimeSearch = function(anime, username, password, callback)
{
	var animeJSON = { anime: { entry:[] }};
	request.get("http://" + username + ':' + password + '@' + "myanimelist.net/api/anime/search.xml?q=" + anime, function(err, res, body) {
		if(res.statusCode == 200) {
			Trim(body, "<entry>", "</entry", function(trimR) {
				for(var i = 0;i < trimR.length;i++) {
					Scrape(trimR[i], ["id", "title", "english", "synonyms", "episodes", "score", "type", "status", "start_date", "end_date", "synopsis", "image"], function(scrapeR) {
						animeJSON.anime.entry.push(scrapeR);
					});
				}			
			});
			callback(err, res.statusCode, animeJSON);
		}
		else
			if(body == "Invalid credentials")
					callback(err, res.statusCode, { Error:"Invalid credentials" });
			else
				callback(err, res.statusCode, { Error:"No results found" });
	});
}

/**
 * Adds a anime to a users list on myanimelist
 * @param id ID of the anime to add, can be found using SearchAnimea
 * @param data XML data to be passed to the server use ValuesAnime to get XML
 * @param username Username of user adding anime to their list
 * @param password Password of user adding anime to their list
 * @param callback No purpose for error handling to be implemented later 
 */
module.exports.AddAnime = function(id, data, username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/animelist/add/" + id.toString() + ".xml?data=" + data,
		method: "POST",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	};

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();

}

/**
 * Updates anime already on your list
 * @param id ID of anime to update, can be found using SearchAnime
 * @param data XML data to be passed to the server use ValuesAnime to get XML
 * @param username Username of user updating anime
 * @param password Password of user updating anime
 * @param callback No purpose for error handling to be implemented later
 */
module.exports.UpdateAnime = function(id, data, username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/animelist/update/" + id.toString() + ".xml?data=" + data,
		method: "POST",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();
}

/**
 * Deletes anime from your list
 * @param id ID of anime to update, can be found using SearchAnime
 * @param username Username of user deleting anime
 * @param password Password of user deleting anime
 * @param callback No purpose for error handing to be implemented later
 */
module.exports.DeleteAnime = function(id, username, password, callback)
{
	var options = { 
		host: "myanimelist.net",
		port: 80,
		path: "/api/animelist/delete/" + id.toString() + ".xml",
		method: "DELETE",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();
}

/**
 * Generates XML to update or add anime
 * @param episodes How many episodes the user has watched
 * @param _status Watched state of anime (1/watching, 2/completed, 3/onhold, 4/dropped, 6/plantowatch)
 * @param score Score from 1-10 on the show
 * @param dl_eps How many episodes you have downloaded
 * @param strg_type How are the episodes stored (1/Hard drive, 2/Ext HD, 3/NAS, 4/DVD, 5/Retail DVD, 6/VHS, 0/None) *[Might be wrong needs testing]
 * @param strg_value How many GBs (float)
 * @param rw_times Times you have rewatched the show
 * @param rw_value Rewatch value
 * @param d_str Date started (mmddyyyy)
 * @param d_stp Date stoped (mmddyyyy)
 * @param pri Priority(0/Low, 1/Medium, 2/Hight) *[Might be wrong needs testing]
 * @param ebl_discuss Enables discussion (1/Enabled, 0/Disabled)
 * @param ebl_rw Enables Discussion after rewatch (1/Enabled, 0/Disabled) *[Might be wrong needs testing]
 * @param comments Any comments about the show
 * @param fansub_grp Fansub group you watched the show from
 * @param tags Any tags that are related to the show
 * @param callback Function to return XML
 */
module.exports.ValuesAnime = function(episodes, _status, score, dl_eps, strg_type, strg_value, rw_times, rw_value, d_str, d_stp, pri, ebl_discuss, ebl_rw, comments, fansub_grp, tags, callback)
{
	
	var xmlTemplate = compile(
		'<?xml version="1.0" encoding="UTF-8"?>' +
		'<entry>' +
		'<episode>{0}</episode>' +
		'<status>{1}</status>' +
		'<score>{2}</score>' +
		'<downloaded_episodes>{3}</downloaded_episodes>' +
		'<storage_type>{4}</storage_type>' +
		'<storage_value>{5}</storage_value>' +
		'<times_rewatched>{6}</times_rewatched>' +
		'<rewatch_value>{7}</rewatch_value>' +
		'<date_start>{8}</date_start>' +
		'<date_finished>{9}</date_finished>' +
		'<priority>{10}</priority>' +
		'<enable_discussion>{11}</enable_discussion>' +
		'<enable_rewatching>{12}</enable_rewatching>' +
		'<comments>{13}</comments>' +
		'<fansub_group>{14}</fansub_group>' +
		'<tags>{15}</tags>' +
		'</entry>');
		
		var value = xmlTemplate(episodes, _status, score, dl_eps, strg_type, strg_value, rw_times, rw_value,  d_str, d_stp, pri, ebl_discuss, ebl_rw, comments, fansub_grp, tags);
		
		callback(value);
}

/**
 * Searches myanimelist for manga
 * @param manga Name of manga to search for
 * @param username Username of user searching
 * @param password Password of user searching
 * @param callback Function to return search in JSON
 */
module.exports.MangaSearch = function(manga, username, password, callback)
{
	var mangaJSON = { manga: { entry:[] }};
	request.get("http://" + username + ':' + password + '@' + "mymangalist.net/api/manga/search.xml?q=" + manga, function(err, res, body) {
		if(res.statusCode == 200) {
			Trim(body, "<entry>", "</entry", function(trimR) {
				for(var i = 0;i < trimR.length;i++) {
					Scrape(trimR[i], ["id", "title", "english", "synonyms", "chapters", "volumes", "score", "type", "status", "start_date", "end_date", "synopsis", "img"], function(scrapeR) {
						mangaJSON.manga.entry.push(scrapeR);
					});
				}			
			});
			callback(err, res.statusCode, mangaJSON);
		}
		else
			if(body == "Invalid credentials")
					callback(err, res.statusCode, { Error:"Invalid credentials" });
			else
				callback(err, res.statusCode, { Error:"No results found" });
	});
}

/**
 * Adds a manga to a users list on myanimelist
 * @param id ID of the manga to add, can be found using SearchManga
 * @param data XML data to be passed to the server use ValuesManga to get XML
 * @param username Username of user adding manga to their list
 * @param password Password of user adding manga to their list
 * @param callback No purpose for error handling to be implemented later 
 */
module.exports.AddManga = function(id, data, username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/mangalist/add/" + id.toString() + ".xml?data=" + data,
		method: "POST",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();
}

/**
 * Updates manga already on your list
 * @param id ID of manga to update, can be found using SearchManga
 * @param data XML data to be passed to the server use ValuesManga to get XML
 * @param username Username of user updating manga
 * @param password Password of user updating manga
 * @param callback No purpose for error handling to be implemented later
 */
module.exports.UpdateManga = function(id, data, username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/mangalist/update/" + id.toString() + ".xml?data=" + data,
		method: "POST",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();
}

/**
 * Deletes manga from your list
 * @param id ID of manga to update, can be found using SearchManga
 * @param username Username of user deleting manga
 * @param password Password of user deleting manga
 * @param callback No purpose for error handing to be implemented later
 */
module.exports.DeleteManga = function(id, username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/mangalist/delete" + id.toString() + ".xml",
		method: "DELETE",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}

	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
		});
	}).end();
}

/**
 * Generates XML to update or add manga
 * @param chp How many chp the user has read
 * @param _status Read state of anime (1/reading, 2/completed, 3/onhold, 4/dropped, 6/plantoread)
 * @param score Score from 1-10 on the manga
 * @param dl_chp How many chapters you have downloaded
 * @param rt_times Times you have reread the manga
 * @param rw_value Rewatch value
 * @param d_str Date started (mmddyyyy)
 * @param d_stp Date stoped (mmddyyyy)
 * @param pri Priority(0/Low, 1/Medium, 2/Hight) *[Might be wrong needs testing]
 * @param ebl_discuss Enables discussion (1/Enabled, 0/Disabled)
 * @param ebl_rr Enables Discussion after reread (1/Enabled, 0/Disabled) *[Might be wrong needs testing]
 * @param comments Any comments about the show
 * @param scan_grp Scan group you read the manga from
 * @param tags Any tags that are related to the show
 * @param rt_vol How many retail volumes you own
 * @param callback Function to return XML
 */
module.exports.ValuesManga = function(chp, vol, _status, score, dl_chp, rr_times, rr_value, d_str, d_stp, pri, ebl_discuss, ebl_rr, comments, scan_grp, tags, rt_vol, callback)
{
	
	var xmlTemplate = compile(
		'<?xml version="1.0" encoding="UTF-8"?>' +
		'<entry>' +
		'<chapter>{0}</chapter>' +
		'<volume>{1}</volume>' +
		'<status>{2}</status>' +
		'<score>{3}</score>' +
		'<downloaded_chapters>{4}</downloaded_chapters>' +
		'<times_reread>{5}</times_reread>' +
		'<reread_value>{6}</reread_value>' +
		'<date_start>{7}</date_start>' +
		'<date_finish>{8}</date_finish>' +
		'<priority>{9}</priority>' +
		'<enable_discussion>{10}</enable_discussion>' +
		'<enable_rereading>{11}</enable_rereading>' +
		'<comments>{12}</comments>' +
		'<scan_group>{13}</scan_group>' +
		'<tags>{14}</tags>' +
		'<retail_volumes>{15}</retail_volumes>' +
		'</entry>');
		
	var value = xmlTemplate(chp, vol, _status, score, dl_chp, rr_times, rr_value, d_str, d_stp, pri, ebl_discuss, ebl_rr, comments, scan_grp, tags, rt_vol);
	callback(value);
}

/**
 * Verifies user credentials
 * @param username Username of user to verify
 * @param password Password of user to verify
 * @param callback Function to return if user is verified (1/True, 0/False) 
 */
module.exports.VerifyCredentials = function(username, password, callback)
{
	var options = {
		host: "myanimelist.net",
		port: 80,
		path: "/api/account/verify_credentials.xml",
		method: "GET",
		headers: {
			'Authorisation':'Basic ' + new Buffer(username+':'+password).toString('base64')
		}
	}
	
	http.request(options, function(res){
		res.on('data', function(chunk){
			console.log('Status: ' + res.statusCode);
			if(res.statusCode == 200)
				callback(true);
			else
				callback(false);
		});
	}).end();
}
